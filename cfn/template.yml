AWSTemplateFormatVersion: "2010-09-09"
Description: AWS security service with threat intelligence
Parameters:
  LogLevel: 
    Type: String
    Default: error
    AllowedValues: 
      - debug
      - info
      - warning
      - error
    Description: Enter debug, info, warning or error. Default is error.
  
  LambdaS3Bucket:
    Type: String
    Description: Enter name of S3 bucket which put lambda source code ready.

  ThreatIntelligenceS3Bucket:
    Type: String
    Description: Enter name of S3 bucket for place TI file.

  ThreatIntelligenceName:
    Type: String
    Default: alienvault
    Description: Enter name of threat intelligence source. Default is alienvault.

  ThreatIntelligenceUrl:
    Type: String
    Default: https://reputation.alienvault.com/reputation.data
    Description: Enter url of threat intelligence source. Default is alienvault's url.

  ThreatIntelligenceFrequence:
    Type: String
    Default: 1 hour
    Description: Enter update frequence of intelligence source in cloudwatch event rate format. Default is 1 hour.


Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - 
        Label: 
          default: "Threat intelligence configuration"
        Parameters: 
          - ThreatIntelligenceName
          - ThreatIntelligenceUrl
          - ThreatIntelligenceFrequence
      - 
        Label: 
          default: "Lambda configuration"
        Parameters: 
          - LogLevel

Resources:
  CWEventRule: 
    Type: AWS::Events::Rule
    Properties: 
      Description: "Trigger lambda to get threat intelligence feed."
      ScheduleExpression: !Sub
        - rate(${Frequence})
        - { Frequence: !Ref ThreatIntelligenceFrequence }
      State: "ENABLED"
      Targets:
        - 
          Arn: !GetAtt GetTiLambda.Arn
          Input: !Sub '{"name": "${ThreatIntelligenceName}","url": "${ThreatIntelligenceUrl}"}'
          Id: "LambdaFunctionV1"

  PermissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "GetTiLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt CWEventRule.Arn

  TiS3Bucket:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: !Ref ThreatIntelligenceS3Bucket
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: "s3:ObjectCreated:*"
            Function: !GetAtt StartSfnLambda.Arn
    DependsOn: 
      - "StartSfnLambda"
      - "PermissionForS3ToInvokeLambda"

  PermissionForS3ToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "StartSfnLambda"
      Action: "lambda:InvokeFunction"
      Principal: "s3.amazonaws.com"
      SourceArn: !Sub arn:aws:s3:::${ThreatIntelligenceS3Bucket}
    DependsOn: 
      - "StartSfnLambda"

  WAFIpSet1:
    Type: "AWS::WAF::IPSet"
    Properties: 
      Name: "TI WAF IP set #1"

  WAFIpSet2:
    Type: "AWS::WAF::IPSet"
    Properties: 
      Name: "TI WAF IP set #2"

  BasicExceutionPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties: 
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          -
            Effect: "Allow"
            Action: 
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Resource: "arn:aws:logs:*:*:*"
      Roles: 
        - Ref: "GetTiRole"
        - Ref: "StartSfnRole"
        - Ref: "UpdateWAFTiRole"
        - Ref: "UpdateGDTiRole"
    DependsOn: 
      - GetTiRole
      - StartSfnRole
      - UpdateWAFTiRole
      - UpdateGDTiRole

  GetTiS3ObjPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties: 
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          -
            Effect: "Allow"
            Action: "s3:GetObject"
            Resource: !Sub ${TiS3Bucket.Arn}/*
      Roles: 
        - Ref: "UpdateWAFTiRole"
        - Ref: "UpdateGDTiRole"
    DependsOn: 
      - UpdateWAFTiRole
      - UpdateGDTiRole

  PutTiS3ObjPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties: 
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          -
            Effect: "Allow"
            Action: "s3:PutObject"
            Resource: !Sub ${TiS3Bucket.Arn}/*
      Roles: 
        - Ref: "GetTiRole"
    DependsOn: "GetTiRole"
  
  StartSfnPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties: 
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          -
            Effect: "Allow"
            Action: "states:StartExecution"
            Resource: "*"
      Roles: 
        - Ref: "StartSfnRole"
    DependsOn: "StartSfnRole"

  UpdateGDPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties: 
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          -
            Effect: "Allow"
            Action: 
              - waf:GetIpSet
              - waf:GetChangeToken
              - waf:UpdateIpSet
            Resource: "*"
      Roles: 
        - Ref: "UpdateGDTiRole"
    DependsOn: "UpdateGDTiRole"

  UpdateWAFPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties: 
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          -
            Effect: "Allow"
            Action: 
              - guardduty:Get*
              - guardduty:List*
              - guardduty:CreateThreatIntelSet
              - guardduty:UpdateThreatIntelSet
            Resource: "*"
          -
            Effect: "Allow"
            Action: 
              - iam:PutRolePolicy
              - iam:DeleteRolePolicy
            Resource: "arn:aws:iam:::role/aws-service-role/guardduty.amazonaws.com/AWSServiceRoleForAmazonGuardDuty"
      Roles: 
        - Ref: "UpdateWAFTiRole"
    DependsOn: "UpdateWAFTiRole"


  UpdateSfn:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      DefinitionString: !Sub
        - |
          {
            "Comment": "Parallel update ti.",
            "StartAt": "UpdateTi",
            "States": {
              "UpdateTi": {
                "Type": "Parallel",
                "End": true,
                "Branches": [
                  {
                   "StartAt": "UpdateWAF",
                   "States": {
                     "UpdateWAF": {
                       "Type": "Task",
                       "Resource":
                         "${UpdateWAFTiLambdaArn}",
                       "End": true
                     }
                   }
                 },
                 {
                   "StartAt": "UpdateGD",
                   "States": {
                     "UpdateGD": {
                       "Type": "Task",
                       "Resource":
                         "${UpdateGDTiLambdaArn}",
                       "End": true
                     }
                   }
                 }
                ]
              }
            }
          }
        - {UpdateWAFTiLambdaArn: !GetAtt UpdateWAFTiLambda.Arn, UpdateGDTiLambdaArn: !GetAtt UpdateGDTiLambda.Arn}


      RoleArn: "arn:aws:iam::064540839264:role/service-role/StatesExecutionRole-ap-northeast-1"
  
  GetTiRole:
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"

  StartSfnRole:
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
  
  UpdateWAFTiRole:
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
  
  UpdateGDTiRole:
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
  
  GetTiLambda: 
    Type: "AWS::Lambda::Function"
    Properties: 
      Handler: "get_ti.lambda_handler"
      Environment:
        Variables:
          S3_BUCKET_NAME: !Ref TiS3Bucket
          LOG_LEVEL: !Ref LogLevel
      Role: !GetAtt GetTiRole.Arn
      Code: 
        S3Bucket: !Ref LambdaS3Bucket
        S3Key: "get_ti.zip"
      Runtime: "python3.6"
      Timeout: 30
    DependsOn: TiS3Bucket

  StartSfnLambda: 
    Type: "AWS::Lambda::Function"
    Properties: 
      Handler: "start_sfn.lambda_handler"
      Environment:
        Variables:
          SFN_ARN: !Ref UpdateSfn
          LOG_LEVEL: !Ref LogLevel
      Role: !GetAtt StartSfnRole.Arn
      Code: 
        S3Bucket: !Ref LambdaS3Bucket
        S3Key: "start_sfn.zip"
      Runtime: "python3.6"
      Timeout: 30

  UpdateWAFTiLambda: 
    Type: "AWS::Lambda::Function"
    Properties: 
      Handler: "update_waf_ti.lambda_handler"
      Environment:
        Variables:
          IP_SET1: !Ref WAFIpSet1
          IP_SET2: !Ref WAFIpSet2
          LOG_LEVEL: !Ref LogLevel
      Role: !GetAtt UpdateWAFTiRole.Arn
      Code: 
        S3Bucket: !Ref LambdaS3Bucket
        S3Key: "update_waf_ti.zip"
      Runtime: "python3.6"
      Timeout: 300
  
  UpdateGDTiLambda: 
    Type: "AWS::Lambda::Function"
    Properties: 
      Handler: "update_gd_ti.lambda_handler"
      Environment:
        Variables:
          LOG_LEVEL: !Ref LogLevel
      Role: !GetAtt UpdateGDTiRole.Arn
      Code: 
        S3Bucket: !Ref LambdaS3Bucket
        S3Key: "update_gd_ti.zip"
      Runtime: "python3.6"
      Timeout: 30